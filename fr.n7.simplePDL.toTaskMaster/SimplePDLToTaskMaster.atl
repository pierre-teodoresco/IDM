-- @path SimplePDL=/fr.n7.simplePDL/SimplePDL.ecore
-- @path TM=/fr.n7.taskMaster/TaskMaster.ecore

module SimplePDLToTaskMaster;
create OUT : TM from IN : SimplePDL;

rule Process2EventBundle {
	from process : SimplePDL!Process
	to bundle : TM!EventBundle(name <- process.name)
}

rule WD2Task {
	from wd : SimplePDL!WorkDefinition
	to event_start : TM!Event(bundle <- wd.getProcess(), name <- wd.name + '_start'),
	   event_finish : TM!Event(bundle <- wd.getProcess(), name <- wd.name + '_finish'),
	   finish_after_start : TM!Causal(event <- event_finish, target <- event_start)
}

helper context SimplePDL!ProcessElement
def: getProcess() : SimplePDL!Process =
	SimplePDL!Process.allInstances()->select(x | x.processElements->includes(self));

rule WS2Requirement {
	from ws : SimplePDL!WorkSequence
	to req : TM!Causal(
		event <- thisModule.resolveTemp(ws.successor, 'event_' 
			+ (if ws.linkType = #s2s or ws.linkType= #f2s then 'start' else 'finish' endif))
		)
}
